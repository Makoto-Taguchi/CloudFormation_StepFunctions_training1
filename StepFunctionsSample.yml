AWSTemplateFormatVersion: 2010-09-09
Description: AWS Step Functions sample project introducing lambda function integration. 
Resources:
  CheckStockPriceLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambdaHandler
      Code:
        ZipFile: |
          function getRandomInt(max) {
              return Math.floor(Math.random() * Math.floor(max));
          }

          exports.lambdaHandler = async (event, context) => {
              // Check current price of the stock
              const stock_price = getRandomInt(100)  // Current stock price is mocked as a random integer between 0 and 100
              return { 'stock_price': stock_price }
          };
      Role: !GetAtt 
        - LambdaFunctionRole
        - Arn
      Runtime: nodejs10.x
  GenerateBuySellRecommendationLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambdaHandler
      Code:
        ZipFile: |
          exports.lambdaHandler = async (event, context) => {
              const { stock_price } = event;
              // If the stock price is greater than 50 recommend selling. Otherwise, recommend buying.
              return stock_price > 50 ? 'sell' : 'buy';
          };
      Role: !GetAtt 
        - LambdaFunctionRole
        - Arn
      Runtime: nodejs10.x
  BuyStockLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambdaHandler
      Code:
        ZipFile: |
          const crypto = require("crypto");

          function getRandomInt(max) {
              return Math.floor(Math.random() * Math.floor(max)) + 1;
          }

          exports.lambdaHandler = async (event, context) => {
              // Get the price of the stock provided as input
              const stock_price = event["stock_price"]
              var date = new Date();
              // Mocked result of a stock buying transaction
              let transaction_result = {
                  'id': crypto.randomBytes(16).toString("hex"), // Unique ID for the transaction
                  'price': stock_price.toString(), // Price of each share
                  'type': "buy", // Type of transaction(buy/ sell)
                  'qty': getRandomInt(10).toString(),  // Number of shares bought / sold(We are mocking this as a random integer between 1 and 10)
                  'timestamp': date.toISOString(),  // Timestamp of the when the transaction was completed
              }
              return transaction_result
          };
      Role: !GetAtt
        - LambdaFunctionRole
        - Arn
      Runtime: nodejs10.x
  SellStockLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambdaHandler
      Code:
        ZipFile: |
          const crypto = require("crypto");

          function getRandomInt(max) {
              return Math.floor(Math.random() * Math.floor(max)) + 1;
          }

          exports.lambdaHandler = async (event, context) => {
              // Get the price of the stock provided as input
              const stock_price = event["stock_price"]
              var date = new Date();
              // Mocked result of a stock selling transaction
              let transaction_result = {
                  'id': crypto.randomBytes(16).toString("hex"), // Unique ID for the transaction
                  'price': stock_price.toString(), // Price of each share
                  'type': "sell", // Type of transaction(buy/ sell)
                  'qty': getRandomInt(10).toString(),  // Number of shares bought / sold(We are mocking this as a random integer between 1 and 10)
                  'timestamp': date.toISOString(),  // Timestamp of the when the transaction was completed
              }
              return transaction_result
          };
      Role: !GetAtt 
        - LambdaFunctionRole
        - Arn
      Runtime: nodejs10.x
  ReportResultLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambdaHandler
      Code:
        ZipFile: |
          exports.lambdaHandler = async (event, context) => {
              const { type } = event;
              // const result_sentence = event["transaction_result"]
              console.log('result:', type);
              return { 'result': type };
          };
      Role: !GetAtt 
        - LambdaFunctionRole
        - Arn
      Runtime: nodejs10.x
  LambdaFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  StockTradingStateMachineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
      ManagedPolicyArns: []
      Policies:
        - PolicyName: StockTradingStateMachineRolePolicy0
          PolicyDocument:
            Statement:
              - Action:
                  - 'lambda:InvokeFunction'
                Resource: !GetAtt 
                  - CheckStockPriceLambda
                  - Arn
                Effect: Allow
        - PolicyName: StockTradingStateMachineRolePolicy1
          PolicyDocument:
            Statement:
              - Action:
                  - 'lambda:InvokeFunction'
                Resource: !GetAtt 
                  - GenerateBuySellRecommendationLambda
                  - Arn
                Effect: Allow
        - PolicyName: StockTradingStateMachineRolePolicy2
          PolicyDocument:
            Statement:
              - Action:
                  - 'lambda:InvokeFunction'
                Resource: !GetAtt 
                  - BuyStockLambda
                  - Arn
                Effect: Allow
        - PolicyName: StockTradingStateMachineRolePolicy3
          PolicyDocument:
            Statement:
              - Action:
                  - 'lambda:InvokeFunction'
                Resource: !GetAtt 
                  - SellStockLambda
                  - Arn
                Effect: Allow
        - PolicyName: StockTradingStateMachineRolePolicy4
          PolicyDocument:
            Statement:
              - Action:
                  - 'lambda:InvokeFunction'
                Resource: !GetAtt 
                  - ReportResultLambda
                  - Arn
                Effect: Allow
  StockTradingStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      DefinitionSubstitutions:
        GenerateBuySellRecommendationLambdaArn: !GetAtt 
          - GenerateBuySellRecommendationLambda
          - Arn
        SellStockLambdaArn: !GetAtt 
          - SellStockLambda
          - Arn
        CheckStockPriceLambdaArn: !GetAtt 
          - CheckStockPriceLambda
          - Arn
        BuyStockLambdaArn: !GetAtt 
          - BuyStockLambda
          - Arn
        ReportResultLambdaArn: !GetAtt 
          - ReportResultLambda
          - Arn
      RoleArn: !GetAtt 
        - StockTradingStateMachineRole
        - Arn
      TracingConfiguration:
        Enabled: true
      DefinitionString: |
        {
            "StartAt": "Check Stock Price",
            "States": {
                "Check Stock Price": {
                    "Type": "Task",
                    "Resource": "${CheckStockPriceLambdaArn}",
                    "Next": "Generate Buy/Sell recommendation"
                },
                "Generate Buy/Sell recommendation": {
                    "Type": "Task",
                    "Resource": "${GenerateBuySellRecommendationLambdaArn}",
                    "ResultPath": "$.recommended_type",
                    "Next": "Buy or Sell?"
                },
                "Buy or Sell?": {
                    "Type": "Choice",
                    "Choices": [
                        {
                            "Variable": "$.recommended_type",
                            "StringEquals": "buy",
                            "Next": "Buy Stock"
                        },
                        {
                            "Variable": "$.recommended_type",
                            "StringEquals": "sell",
                            "Next": "Sell Stock"
                        }
                    ]
                },
                "Buy Stock": {
                    "Type": "Task",
                    "Resource": "${BuyStockLambdaArn}",
                    "Next": "Report Result"
                },
                "Sell Stock": {
                    "Type": "Task",
                    "Resource": "${SellStockLambdaArn}",
                    "Next": "Report Result"
                },
                "Report Result": {
                    "Type": "Task",
                    "Resource": "${ReportResultLambdaArn}",
                    "End": true
                }
            }
        }
Outputs:
  StateMachineArn:
    Value:
      Ref: StockTradingStateMachine
  ExecutionInput:
    Description: Sample input to StartExecution.
    Value:
      >
        {}